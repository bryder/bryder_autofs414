#!/sbin/runscript
# Copyright 1999-2004 Gentoo Foundation
# Distributed under the terms of the GNU General Public License v2
# $Header: /home/cvs/root/autofs/gentoo/net-fs/autofs/files/autofs.init,v 1.16 2005/04/11 13:21:16 raven Exp $

# rc file for automount using a Sun-style "master map".
# We first look for a local /etc/autofs/auto.master, then a YP
# map with that name

DAEMON=/usr/sbin/automount
SYSCONFDIR=/etc/autofs

depend() {
	need localmount	portmap
	use ypbind nfs slapd portmap
}

opts="start stop status stats reload restart"

#
# Check for all maps that are to be loaded
#
function getschemes()
{
	SOURCES=`grep ^automount: /etc/nsswitch.conf | \
		sed -e 's/^.*://' -e 's/\[.*\]/ /g'`
	
	if [ `echo $SOURCES | awk '{print NF}'` -gt 0 ]
	then
		echo ${SOURCES}
	else
		echo files
	fi
}

function catnismap()
{
	if [ -z "$1" ] ; then
		map="auto_master"
	else
		map="$1"
	fi
	/usr/bin/ypcat -k "$map" 2> /dev/null | sed -e '/^#/d' -e '/^$/d'
}

function getfilemounts()
{
	if [ -f ${SYSCONFDIR}/auto.master ] ; then
		cat ${SYSCONFDIR}/auto.master | awk '{print $0}' | sed -e '/^#/d' -e '/^$/d' | (
		while read auto_master_in
		do
			if [ "`echo $auto_master_in | grep '^+'`" = "" ]; then
				echo $auto_master_in
			else
				for nismap in `cat ${SYSCONFDIR}/auto.master | grep '^\+' |
						sed -e '/^#/d' -e '/^$/d'`; do
					catnismap `echo "$nismap" | sed -e 's/^\+//'`
				done
			fi
		done
		)
	fi
}

function getnismounts()
{
	YPMAP=`catnismap auto.master`
	if [ -z "$YPMAP" ]; then
		catnismap
	else
		catnismap auto.master
	fi
}

function getldapmounts()
{
	if [ -x /usr/lib/autofs/autofs-ldap-auto-master ]; then
		/usr/lib/autofs/autofs-ldap-auto-master \
			-m ${ldap_map_oc} -e ${ldap_entry_oc} \
			-n ${ldap_map_key} -k ${ldap_entry_key} \
			-v ${ldap_value} 2> /dev/null
	fi
}

function getrawmounts()
{
	for scheme in `getschemes` ; do
		case "$scheme" in
		files)
			if [ -z "$filescheme" ] ; then
				getfilemounts
				filescheme=1
				export filescheme
			fi
			;;
		nis*)
			if [ -z "$nisscheme" ] ; then
				getnismounts
				nisscheme=1
				export nisscheme
			fi
			;;
		ldap*)
			if [ -z "$ldapscheme" ] ; then
				getldapmounts
				ldapscheme=1
				export ldapscheme
			fi
			;;
		esac
	done
}

#
# This function will build a list of automount commands to execute in
# order to activate all the mount points. It is used to figure out
# the difference of automount points in case of a reload
#
function getmounts()
{
	knownmaps=" "
	getrawmounts | (
	while read dir map options
	do
	    # These checks screen out duplicates and skip over directories
	    # where the map is '-'.
	    # We can't do empty or direct host maps, so don't bother trying.

	    # Strip trailing slashes from the dir line if it exists to aid
	    # in checking for duplicate maps
	    dir=`echo "$dir" | sed -e "s/\/*$//"`

	    if [ ! -z "$map" -a "$map" = "-hosts" ] ; then
		continue
	    fi

	    # Do not include a map if it is a duplicate, maps on top of
	    # another map or another map, maps on top of it.
	    for knownmap in $knownmaps
	    do	
		if [ "`echo $dir/ | grep ^$knownmap`" != "" \
			-o "`echo $knownmap | grep ^$dir/`" != "" \]
		then 
		    continue 2
		fi	
	    done

	    if [ ! -z "$dir" -a ! -z "$map" \
			-a x`echo "$map" | cut -c1` != 'x-' ]
	    then
		# If the options include a -t or --timeout, a -g or --ghost,
		# a -v or --verbose or a -d or --debug paramter, then pull
		# those particular options out.
		: echo DAEMONOPTIONS OPTIONS $daemonoptions $options
		startupoptions=
		if echo "$options" | grep -qE -- '\B-(t\b|-timeout\b=)' ;
		then
		    startupoptions="--timeout=$(echo $options |\
			sed 's/.*-\(t[^0-9]*\|-timeout\)[ \t=]*\([0-9][0-9]*\).*$/\2/g')"
		elif echo "$daemonoptions" | grep -q -- '-t' ;
		then
		    # It's okay to be sloppy with DAEMONOPTIONS as there is no
		    # possibility of conflicting with mount or map options.
		    startupoptions="--timeout=$(echo $daemonoptions | \
		      sed 's/.*--*t\(imeout\)*[ \t=]*\([0-9][0-9]*\).*$/\2/g')"
		fi

		# Check for the ghost option
		if echo "$daemonoptions $options" | grep -qE -- '\B-(g\b|-ghost\b)' ;
		then
		    startupoptions="$startupoptions --ghost"
		fi
		# Dont even deal with conflicts between --ghost and [no]browse
		# Its just insane to configure things like that.
		if echo "$options" | grep -qE -- '\B-browse\b' ;
		then
		    startupoptions="$startupoptions --ghost"
		fi
		# Check for verbose
		if echo "$daemonoptions $options" | \
					grep -qE -- '\B-(v\b|-verbose\b)' ;
		then
		    startupoptions="$startupoptions --verbose"
		fi

		# Check for debug
		if echo "$daemonoptions $options" | \
					grep -qE -- '\B-(d\b|-debug\b)' ;
		then
		    startupoptions="$startupoptions --debug"
		fi

		# Other option flags are intended for maps.
		mapoptions="$(echo "$daemonoptions $options" |\
		      sed   's/-\(t[^0-9]*\|-timeout\)[ \t=]*\([0-9][0-9]*\)//g' |
		      sed   's/-\(g\b\|-ghost\b\)//g' |
		      sed   's/-\(v\b\|-verbose\b\)//g' |
		      sed   's/-\(d\b\|-debug\b\)//g' |
		      sed   's/-\b\(no\)\?browse\b//g')"

		# Break up the maptype and map, if the map type is specified
		maptype=`echo $map | cut -f1 -d:`
		# Handle degenerate map specifiers
		if [ "$maptype" = "$map" ] ; then
		    if [ "$map" = "hesiod" -o "$map" = "userhome" ] ; then
			maptype=$map
			map=
		    elif [ "$map" = "multi" ] ; then
			maptype=$map
			map=
		    elif [ -x "$map" ]; then
			maptype=program
		    elif [ -x "${SYSCONFDIR}/$map" ]; then
			maptype=program
			map=`echo ${SYSCONFDIR}/$map | sed 's^//^/^g'`
		    elif [ -f "$map" ]; then
			maptype=file
		    elif [ -f "${SYSCONFDIR}/$map" ]; then
			maptype=file
			map=`echo ${SYSCONFDIR}/$map | sed 's^//^/^g'`
		    else
			maptype=yp
			if [ "$underscoredot" = "1" ] ; then
			    map=`basename $map | sed -e s/^auto_home/auto.home/ -e s/^auto_mnt/auto.mnt/`
			else
			    map=`basename $map | sed 's^//^/^g'`
			fi
		    fi
		fi
		map=`echo $map | cut -f2- -d:`

		: echo STARTUPOPTIONS $startupoptions
		: echo DIR $dir
		: echo MAPTYPE $maptype
		: echo MAP $map
		: echo MAPOPTIONS $mapoptions
		: echo LOCALOPTIONS $localoptions

		echo "$DAEMON $startupoptions $dir $maptype $map $mapoptions $localoptions" | sed -e 's/	/ /g' -e 's/  */ /g'

		: echo ------------------------
	        knownmaps=" $dir/ $knownmaps"
	    fi
	done
    )
}

function get_command_from_pid()
{
	ps ax | grep "[0-9]:[0-9][0-9] $DAEMON " | (
		while read pid tt stat time command; do
			if [ "$pid" = "$1" ] ; then
				echo `echo "$command" | \
					sed 's/--pid-file.*\.pid/ /'`
				return 0
			fi
		done
	)
	return 0
}

function umount_loopback()
{
    loops=`LC_ALL=C awk '!/^#/ && $1 ~ /^\/dev\/loop/ && $2 != "/" {print $2}' /proc/mounts`
    automounts=`LC_ALL=C awk '!/^#/ && $1 ~ /^automount/ {print $2}' /proc/mounts`

    for l in $loops
    do
	# If a loop device is mounted into a subdir of the automount point,
	# umount it here.
	for a in $automounts
	do
	    match=`echo $l | grep -E "^$a[\$|/]" || true`
	    if [ -n "$match" ]; then
		echo ""
		echo -n $"Unmounting loopback filesystem $match:  "
		loopdev=`LC_ALL=C grep $l /proc/mounts | awk '{print $1}'`
		umount -d $match
		if [ $? -eq 0 ]; then
		    echo "done"
		else
		    echo "failed ($?)"
		fi
	    fi
	done
    done

    # If the loop device file exists under the automount point, umount
    # it here.
    loopmnts=`LC_ALL=C awk '!/^#/ && $1 ~ /^\/dev\/loop/ && $2 != "/" {print $1}' /proc/mounts`
    for l in $loopmnts
    do
	loopmnt=`losetup $l | awk -F\( '{print $2}' | awk -F\) '{print $1}'`
	for a in $automounts
	do
	    match=`echo $loopmnt | grep -E "^$a[\$|/]" || true`
	    if [ -n "$match" ]; then
		echo ""
		echo -n $"Unmounting loopback filesystem $match:  "
		umount -d $match
		if [ $? -eq 0 ]; then
		    echo "done"
		else
		    echo "failed ($?)"
		fi
	    fi
	done
    done
}

start() {
	ebegin "Starting automounter"

	# ensure autofs support is loaded
	grep -q autofs /proc/filesystems || modprobe -k autofs4 ||  modprobe -k autofs 2>/dev/null
	if [ $? -ne 0 ]
	then
		eend 1 "No autofs support available"
		exit 1
	fi
	
	# Check that maps exist
	if [ -z "$(getrawmounts)" ]
	then
		eend 1 "No automount maps defined"
		exit 1
	fi

	# ensure pid file directory exists
	if [ ! -e /var/run/autofs ]
	then
		mkdir /var/run/autofs
	fi

	# Now go
	getmounts | while read cmd rest
	do
		mnt=`echo $rest | sed 's/^.* \(\/[^ ]*\) [A-Za-z].*$/\1/'`
		pidfile=/var/run/autofs/`echo $mnt | sed 's,/,_,g'`.pid

		start-stop-daemon --start --pidfile $pidfile --quiet \
			--exec $DAEMON -- --pid-file=$pidfile $rest
		ret=$?

		if [ $ret -ne 0 ]
		then
			echo "Could not start automount for $mnt"	
		fi
	done

	eend $ret
}

stop() {
	ebegin "Stopping automounter"

	umount_loopback

#	any=0
	for file in `ls /var/run/autofs/*.pid 2>/dev/null`
	do
		if [ -e "$file" ]
		then
#			any=1
			pid=`head -n 1 $file`
			mnt=`ps -wwo 'cmd=' $pid | sed -e \
			  's,.* --pid-file=/var/run/autofs/\([^ ]*\)\.pid.*,\1,; s,_,/,g'`
			dname=`basename $DAEMON`

			start-stop-daemon --stop --quiet \
					--retry USR2/${daemon_exit_wait} \
					--pidfile $file --name $dname
			ret=$?

			case $ret in
			0)
				rm -f $file
				;;
			1)
				echo "No process for automount $mnt"
				rm -f $file
				;;
			2)
				echo "Couldn't stop automount for $mnt"
				;;
			*)
				echo "Strange start-stop-daemon exit status: $?"
				;;
			esac
		fi
	done

#	if [ $any -eq 1 ]; then
#		echo
#	fi

	eend $ret
}

stats() {
	echo "Configured Mount Points:"
	echo "------------------------"
	getmounts
	echo ""
	echo "Active Mount Points:"
	echo "--------------------"
	ps ax|grep "[0-9]:[0-9][0-9] $DAEMON " | (
		while read pid tt stat time command; do echo $command; done
	)
}

reload() {
	echo "Reloading automounter: checking for changes ... "

	TMP1=`mktemp -t autofs.XXXXXX`
	TMP2=`mktemp -t autofs.XXXXXX`

	getmounts >$TMP1


	for i in `ls /var/run/autofs/*.pid 2>/dev/null`
	do
		pid=`head -n 1 $i 2>/dev/null`
		[ "$pid" = "" ] && continue

		cmd=`get_command_from_pid $pid`
		echo $cmd >>$TMP2

		mnt=`ps -wwo 'cmd=' $pid | sed -e \
		 's,.* --pid-file=/var/run/autofs/\([^ ]*\)\.pid.*,\1,; s,_,/,g'`

		if ! grep -q "$cmd" $TMP1
		then
			echo "Stopping automounter: $mnt"
			kill -USR2 $pid 2>/dev/null
		else
			echo "Reloading automounter map: $mnt"
			kill -HUP $pid 2> /dev/null
		fi
	done

	cat $TMP1 | (while read x; do
		if ! grep -q "^$x" $TMP2; then
			echo $x | while read cmd rest; do

			mnt=`echo $rest | sed 's/^.* \(\/[^ ]*\) [A-Za-z].*$/\1/'`
			pidfile=/var/run/autofs/`echo $mnt | sed 's,/,_,g'`.pid

			start-stop-daemon --start --pidfile $pidfile --quiet \
				--exec $DAEMON -- --pid-file=$pidfile $rest
			ret=$?

			if [ $ret -ne 0 ]; then
				echo "Could not start automount for $mnt"	
			else
				echo "Started automounter: $mnt"
			fi
			done
		fi
	done)

	rm -f $TMP1 $TMP2
}

restart() {
	svc_stop
	svc_start
}

